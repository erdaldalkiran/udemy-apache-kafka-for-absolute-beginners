/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package data;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Delivery extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5986485466559404482L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Delivery\",\"namespace\":\"data\",\"fields\":[{\"name\":\"CreatedAt\",\"type\":\"long\"},{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"Items\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Item\",\"fields\":[{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"Quantity\",\"type\":\"int\"}]},\"java-class\":\"java.util.List\"}},{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"Price\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Delivery> ENCODER =
      new BinaryMessageEncoder<Delivery>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Delivery> DECODER =
      new BinaryMessageDecoder<Delivery>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Delivery> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Delivery> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Delivery> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Delivery>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Delivery to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Delivery from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Delivery instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Delivery fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private long CreatedAt;
   private int Id;
   private java.util.List<data.Item> Items;
   private java.lang.CharSequence Name;
   private double Price;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Delivery() {}

  /**
   * All-args constructor.
   * @param CreatedAt The new value for CreatedAt
   * @param Id The new value for Id
   * @param Items The new value for Items
   * @param Name The new value for Name
   * @param Price The new value for Price
   */
  public Delivery(java.lang.Long CreatedAt, java.lang.Integer Id, java.util.List<data.Item> Items, java.lang.CharSequence Name, java.lang.Double Price) {
    this.CreatedAt = CreatedAt;
    this.Id = Id;
    this.Items = Items;
    this.Name = Name;
    this.Price = Price;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return CreatedAt;
    case 1: return Id;
    case 2: return Items;
    case 3: return Name;
    case 4: return Price;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: CreatedAt = (java.lang.Long)value$; break;
    case 1: Id = (java.lang.Integer)value$; break;
    case 2: Items = (java.util.List<data.Item>)value$; break;
    case 3: Name = (java.lang.CharSequence)value$; break;
    case 4: Price = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'CreatedAt' field.
   * @return The value of the 'CreatedAt' field.
   */
  public long getCreatedAt() {
    return CreatedAt;
  }


  /**
   * Sets the value of the 'CreatedAt' field.
   * @param value the value to set.
   */
  public void setCreatedAt(long value) {
    this.CreatedAt = value;
  }

  /**
   * Gets the value of the 'Id' field.
   * @return The value of the 'Id' field.
   */
  public int getId() {
    return Id;
  }


  /**
   * Sets the value of the 'Id' field.
   * @param value the value to set.
   */
  public void setId(int value) {
    this.Id = value;
  }

  /**
   * Gets the value of the 'Items' field.
   * @return The value of the 'Items' field.
   */
  public java.util.List<data.Item> getItems() {
    return Items;
  }


  /**
   * Sets the value of the 'Items' field.
   * @param value the value to set.
   */
  public void setItems(java.util.List<data.Item> value) {
    this.Items = value;
  }

  /**
   * Gets the value of the 'Name' field.
   * @return The value of the 'Name' field.
   */
  public java.lang.CharSequence getName() {
    return Name;
  }


  /**
   * Sets the value of the 'Name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.Name = value;
  }

  /**
   * Gets the value of the 'Price' field.
   * @return The value of the 'Price' field.
   */
  public double getPrice() {
    return Price;
  }


  /**
   * Sets the value of the 'Price' field.
   * @param value the value to set.
   */
  public void setPrice(double value) {
    this.Price = value;
  }

  /**
   * Creates a new Delivery RecordBuilder.
   * @return A new Delivery RecordBuilder
   */
  public static data.Delivery.Builder newBuilder() {
    return new data.Delivery.Builder();
  }

  /**
   * Creates a new Delivery RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Delivery RecordBuilder
   */
  public static data.Delivery.Builder newBuilder(data.Delivery.Builder other) {
    if (other == null) {
      return new data.Delivery.Builder();
    } else {
      return new data.Delivery.Builder(other);
    }
  }

  /**
   * Creates a new Delivery RecordBuilder by copying an existing Delivery instance.
   * @param other The existing instance to copy.
   * @return A new Delivery RecordBuilder
   */
  public static data.Delivery.Builder newBuilder(data.Delivery other) {
    if (other == null) {
      return new data.Delivery.Builder();
    } else {
      return new data.Delivery.Builder(other);
    }
  }

  /**
   * RecordBuilder for Delivery instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Delivery>
    implements org.apache.avro.data.RecordBuilder<Delivery> {

    private long CreatedAt;
    private int Id;
    private java.util.List<data.Item> Items;
    private java.lang.CharSequence Name;
    private double Price;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(data.Delivery.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.CreatedAt)) {
        this.CreatedAt = data().deepCopy(fields()[0].schema(), other.CreatedAt);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.Id)) {
        this.Id = data().deepCopy(fields()[1].schema(), other.Id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.Items)) {
        this.Items = data().deepCopy(fields()[2].schema(), other.Items);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.Name)) {
        this.Name = data().deepCopy(fields()[3].schema(), other.Name);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.Price)) {
        this.Price = data().deepCopy(fields()[4].schema(), other.Price);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing Delivery instance
     * @param other The existing instance to copy.
     */
    private Builder(data.Delivery other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.CreatedAt)) {
        this.CreatedAt = data().deepCopy(fields()[0].schema(), other.CreatedAt);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Id)) {
        this.Id = data().deepCopy(fields()[1].schema(), other.Id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Items)) {
        this.Items = data().deepCopy(fields()[2].schema(), other.Items);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Name)) {
        this.Name = data().deepCopy(fields()[3].schema(), other.Name);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.Price)) {
        this.Price = data().deepCopy(fields()[4].schema(), other.Price);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'CreatedAt' field.
      * @return The value.
      */
    public long getCreatedAt() {
      return CreatedAt;
    }


    /**
      * Sets the value of the 'CreatedAt' field.
      * @param value The value of 'CreatedAt'.
      * @return This builder.
      */
    public data.Delivery.Builder setCreatedAt(long value) {
      validate(fields()[0], value);
      this.CreatedAt = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'CreatedAt' field has been set.
      * @return True if the 'CreatedAt' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'CreatedAt' field.
      * @return This builder.
      */
    public data.Delivery.Builder clearCreatedAt() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Id' field.
      * @return The value.
      */
    public int getId() {
      return Id;
    }


    /**
      * Sets the value of the 'Id' field.
      * @param value The value of 'Id'.
      * @return This builder.
      */
    public data.Delivery.Builder setId(int value) {
      validate(fields()[1], value);
      this.Id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Id' field has been set.
      * @return True if the 'Id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'Id' field.
      * @return This builder.
      */
    public data.Delivery.Builder clearId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'Items' field.
      * @return The value.
      */
    public java.util.List<data.Item> getItems() {
      return Items;
    }


    /**
      * Sets the value of the 'Items' field.
      * @param value The value of 'Items'.
      * @return This builder.
      */
    public data.Delivery.Builder setItems(java.util.List<data.Item> value) {
      validate(fields()[2], value);
      this.Items = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'Items' field has been set.
      * @return True if the 'Items' field has been set, false otherwise.
      */
    public boolean hasItems() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'Items' field.
      * @return This builder.
      */
    public data.Delivery.Builder clearItems() {
      Items = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'Name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return Name;
    }


    /**
      * Sets the value of the 'Name' field.
      * @param value The value of 'Name'.
      * @return This builder.
      */
    public data.Delivery.Builder setName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.Name = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'Name' field has been set.
      * @return True if the 'Name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'Name' field.
      * @return This builder.
      */
    public data.Delivery.Builder clearName() {
      Name = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'Price' field.
      * @return The value.
      */
    public double getPrice() {
      return Price;
    }


    /**
      * Sets the value of the 'Price' field.
      * @param value The value of 'Price'.
      * @return This builder.
      */
    public data.Delivery.Builder setPrice(double value) {
      validate(fields()[4], value);
      this.Price = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'Price' field has been set.
      * @return True if the 'Price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'Price' field.
      * @return This builder.
      */
    public data.Delivery.Builder clearPrice() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Delivery build() {
      try {
        Delivery record = new Delivery();
        record.CreatedAt = fieldSetFlags()[0] ? this.CreatedAt : (java.lang.Long) defaultValue(fields()[0]);
        record.Id = fieldSetFlags()[1] ? this.Id : (java.lang.Integer) defaultValue(fields()[1]);
        record.Items = fieldSetFlags()[2] ? this.Items : (java.util.List<data.Item>) defaultValue(fields()[2]);
        record.Name = fieldSetFlags()[3] ? this.Name : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.Price = fieldSetFlags()[4] ? this.Price : (java.lang.Double) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Delivery>
    WRITER$ = (org.apache.avro.io.DatumWriter<Delivery>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Delivery>
    READER$ = (org.apache.avro.io.DatumReader<Delivery>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.CreatedAt);

    out.writeInt(this.Id);

    long size0 = this.Items.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (data.Item e0: this.Items) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    out.writeString(this.Name);

    out.writeDouble(this.Price);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.CreatedAt = in.readLong();

      this.Id = in.readInt();

      long size0 = in.readArrayStart();
      java.util.List<data.Item> a0 = this.Items;
      if (a0 == null) {
        a0 = new SpecificData.Array<data.Item>((int)size0, SCHEMA$.getField("Items").schema());
        this.Items = a0;
      } else a0.clear();
      SpecificData.Array<data.Item> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<data.Item>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          data.Item e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new data.Item();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      this.Name = in.readString(this.Name instanceof Utf8 ? (Utf8)this.Name : null);

      this.Price = in.readDouble();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.CreatedAt = in.readLong();
          break;

        case 1:
          this.Id = in.readInt();
          break;

        case 2:
          long size0 = in.readArrayStart();
          java.util.List<data.Item> a0 = this.Items;
          if (a0 == null) {
            a0 = new SpecificData.Array<data.Item>((int)size0, SCHEMA$.getField("Items").schema());
            this.Items = a0;
          } else a0.clear();
          SpecificData.Array<data.Item> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<data.Item>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              data.Item e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new data.Item();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 3:
          this.Name = in.readString(this.Name instanceof Utf8 ? (Utf8)this.Name : null);
          break;

        case 4:
          this.Price = in.readDouble();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










